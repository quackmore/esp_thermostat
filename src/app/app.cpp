/*
 * ----------------------------------------------------------------------------
 * "THE BEER-WARE LICENSE" (Revision 42):
 * <quackmore-ff@yahoo.com> wrote this file.  As long as you retain this notice
 * you can do whatever you want with this stuff. If we meet some day, and you 
 * think this stuff is worth it, you can buy me a beer in return. Quackmore
 * ----------------------------------------------------------------------------
 */

// SDK includes
extern "C"
{
#include "mem.h"
#include "library_dio_task.h"
#include "esp8266_io.h"
}

#include "espbot_cron.hpp"
#include "espbot_global.hpp"
#include "library_dht.hpp"
#include "app.hpp"
#include "app_remote_log.hpp"
#include "app_heater.hpp"
#include "app_temp_log.hpp"
#include "app_temp_control.hpp"

/*
 *  APP_RELEASE is coming from git
 *  'git --no-pager describe --tags --always --dirty'
 *  and is generated by the Makefile
 */

#ifndef APP_RELEASE
#define APP_RELEASE "Unavailable"
#endif

char *app_release = APP_RELEASE;

char *app_name = "THERMOSTAT";

void app_init_before_wifi(void)
{
    init_dio_task();
    heater_init();
    temp_log_init();
    init_remote_logger();
    temp_control_init();
    // don't wait a full minute before updating
    // the current time and temperature reading
    // cause a browser could require it for visualization...
    // init_current_time();
    //    init_temperature_readings();
    cron_add_job(CRON_STAR, CRON_STAR, CRON_STAR, CRON_STAR, CRON_STAR, temp_log_read);
    // cron_add_job(CRON_STAR, CRON_STAR, CRON_STAR, CRON_STAR, CRON_STAR, temp_control_run);
    // cron_add_job(CRON_STAR, CRON_STAR, CRON_STAR, CRON_STAR, CRON_STAR, send_events_to_external_host);
    // cron_add_job(2, 0, CRON_STAR, CRON_STAR, CRON_STAR, check_ota, NULL);
}

os_timer_t thermostat_start_timer;

void thermostat_start(void)
{
    init_temperature_readings();
    cron_sync();
}

void app_init_after_wifi(void)
{
    static bool first_time = true;
    if (first_time)
    {
        first_time = false;
        os_timer_disarm(&thermostat_start_timer);
        os_timer_setfn(&thermostat_start_timer, (os_timer_func_t *)thermostat_start, NULL);
        os_timer_arm(&thermostat_start_timer, 2000, 0);
    }
}

void app_deinit_on_wifi_disconnect()
{
}