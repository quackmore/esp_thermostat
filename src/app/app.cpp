/*
 * ----------------------------------------------------------------------------
 * "THE BEER-WARE LICENSE" (Revision 42):
 * <quackmore-ff@yahoo.com> wrote this file.  As long as you retain this notice
 * you can do whatever you want with this stuff. If we meet some day, and you 
 * think this stuff is worth it, you can buy me a beer in return. Quackmore
 * ----------------------------------------------------------------------------
 */

// SDK includes
extern "C"
{
#include "mem.h"
#include "library_dio_task.h"
#include "esp8266_io.h"
}

#include "espbot_global.hpp"
#include "library_dht.hpp"
#include "app.hpp"
#include "app_heater.hpp"
#include "app_temp_log.hpp"
#include "app_temp_control.hpp"
#include "app_cron.hpp"

/*
 *  APP_RELEASE is coming from git
 *  'git --no-pager describe --tags --always --dirty'
 *  and is generated by the Makefile
 */

#ifndef APP_RELEASE
#define APP_RELEASE "Unavailable"
#endif

char *app_release = APP_RELEASE;

char *app_name = "THERMOSTAT";

uint32 lastRebootTime;

void app_init_before_wifi(void)
{
    lastRebootTime = 0;
    init_dio_task();
    heater_init();
    temp_log_init();
    temp_control_init();
    cron_init();
    cron_add_job(CRON_STAR, CRON_STAR, CRON_STAR, CRON_STAR, CRON_STAR, temp_log_read, NULL);
    cron_add_job(5, CRON_STAR, CRON_STAR, CRON_STAR, CRON_STAR, temp_control_run, NULL);
    cron_add_job(10, CRON_STAR, CRON_STAR, CRON_STAR, CRON_STAR, temp_control_run, NULL);
    cron_add_job(15, CRON_STAR, CRON_STAR, CRON_STAR, CRON_STAR, temp_control_run, NULL);
    cron_add_job(20, CRON_STAR, CRON_STAR, CRON_STAR, CRON_STAR, temp_control_run, NULL);
    cron_add_job(25, CRON_STAR, CRON_STAR, CRON_STAR, CRON_STAR, temp_control_run, NULL);
    cron_add_job(30, CRON_STAR, CRON_STAR, CRON_STAR, CRON_STAR, temp_control_run, NULL);
    cron_add_job(35, CRON_STAR, CRON_STAR, CRON_STAR, CRON_STAR, temp_control_run, NULL);
    cron_add_job(40, CRON_STAR, CRON_STAR, CRON_STAR, CRON_STAR, temp_control_run, NULL);
    cron_add_job(45, CRON_STAR, CRON_STAR, CRON_STAR, CRON_STAR, temp_control_run, NULL);
    cron_add_job(50, CRON_STAR, CRON_STAR, CRON_STAR, CRON_STAR, temp_control_run, NULL);
    cron_add_job(55, CRON_STAR, CRON_STAR, CRON_STAR, CRON_STAR, temp_control_run, NULL);
    // cron_add_job(2, 0, CRON_STAR, CRON_STAR, CRON_STAR, check_ota, NULL);
}

os_timer_t delay_after_wifi;

// give some time to sntp to setup everything ...
void app_init_after_wifi_delayed(void)
{
    static bool first_time = true;
    if (first_time)
    {
        lastRebootTime = esp_sntp.get_timestamp();
        cron_sync();
        first_time = false;
    }
}

void app_init_after_wifi(void)
{
    esp_mDns.start(espbot.get_name());
    os_timer_disarm(&delay_after_wifi);
    os_timer_setfn(&delay_after_wifi, (os_timer_func_t *)app_init_after_wifi_delayed, NULL);
    os_timer_arm(&delay_after_wifi, 2000, 0);

    static bool first_time = true;
    if (first_time)
    {
        first_time = false;
    }
}

uint32 get_last_reboot_date(void)
{
    return lastRebootTime;
}

void app_deinit_on_wifi_disconnect()
{
    esp_mDns.stop();
}